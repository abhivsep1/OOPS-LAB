#q1] Question: Create a class Person with attributes name and age, and a method display() that prints the name and age. Then, create a subclass Student that inherits from Person and adds an attribute student_id. Write a method show_details() in Student to print all details, including student_id in python

class Person:
    def __init__(self, name, age):
        self.name = name  # Initialize name
        self.age = age    # Initialize age

    def display(self):
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")

class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)  # Call the parent class constructor
        self.student_id = student_id  # Initialize student_id

    def show_details(self):
        self.display()  # Call the parent class display method
        print(f"Student ID: {self.student_id}")

person = Person("Alice", 30)
student = Student("Bob", 20, "S12345")

print("Person Details:")
person.display()

print("\nStudent Details:")
student.show_details()

#q2] Question: Create a class Vehicle with a method info() that prints "This is a vehicle". Inherit Car from Vehicle and add a method car_info() to print "This is a car". Further, create another subclass ElectricCar that inherits from Car and adds a method battery_info() to print "This car has a battery." Demonstrate how multilevel inheritance works by calling all methods from an ElectricCar object. 
in python

class Vehicle:
    def info(self):
        print("This is a vehicle")

class Car(Vehicle):
    def car_info(self):
        print("This is a car")

class ElectricCar(Car):
    def battery_info(self):
        print("This car has a battery.")

electric_car = ElectricCar()

electric_car.info()         
electric_car.car_info()     
electric_car.battery_info() 

#q3] Create two classes Teacher and Author, each with their own description() method to describe the profession. Then, create a subclass TutorAuthor that inherits from both Teacher and Author. Use this subclass to call the description() method from each parent class. Use the super() function to resolve any conflicts if necessary. 
class Teacher:
    def description(self):
        print("I am a teacher. I educate students.")

class Author:
    def description(self):
        print("I am an author. I write books.")

class TutorAuthor(Teacher, Author):
    def description(self):
        print("I am a tutor and an author.")
        super().description()  # Calling the method from Teacher class
        super(Teacher, self).description()  # Calling the method from Author class

tutor_author = TutorAuthor()

tutor_author.description()

#q4] Question: Create a class Animal with a method sound() that prints "Animals make sound". Then create two subclasses Dog and Cat, each with their own version of sound() method that prints "Dog barks" and "Cat meows" respectively. Demonstrate hierarchical inheritance by calling the sound() method from both Dog and Cat objects.
class Animal:
    def sound(self):
        print("Animals make sound")

class Dog(Animal):
    def sound(self):
        print("Dog barks")

class Cat(Animal):
    def sound(self):
        print("Cat meows")

dog = Dog()
cat = Cat()

print("Dog says:")
dog.sound()  # Calls Dog's version of sound()

print("Cat says:")
cat.sound()  # Calls Cat's version of sound()

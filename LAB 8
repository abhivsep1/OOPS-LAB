#q1] Implement the bubble sort algo using classes and methods

class BubbleSort:
    def __init__(self, data):
        self.data = data  # Initialize the list of data to be sorted

    def sort(self):
        n = len(self.data)
        for i in range(n):
            swapped = False
            for j in range(0, n - i - 1):
                if self.data[j] > self.data[j + 1]:
                    self.data[j], self.data[j + 1] = self.data[j + 1], self.data[j]
                    swapped = True
            if not swapped:
                break

    def display(self):
        print("Sorted list:", self.data)


if __name__ == "__main__":
    data = [64, 34, 25, 12, 22, 11, 90]
    sorter = BubbleSort(data)

    print("Original list:", sorter.data)

    sorter.sort()

    sorter.display()


#q2]Implement the insertion sort using Python


class InsertionSort:
    def __init__(self, data):
        self.data = data  # Initialize the list of data to be sorted

    def sort(self):
        for i in range(1, len(self.data)):  # Start from the second element
            key = self.data[i]  # The element to be inserted
            j = i - 1  # Start comparing with the previous element

            while j >= 0 and self.data[j] > key:
                self.data[j + 1] = self.data[j]
                j -= 1
            
            self.data[j + 1] = key

    def display(self):
        print("Sorted list:", self.data)


if __name__ == "__main__":
    data = [64, 34, 25, 12, 22, 11, 90]
    sorter = InsertionSort(data)

    print("Original list:", sorter.data)

    sorter.sort()

    sorter.display()


#q3]Implement the selection sort using Python

class SelectionSort:
    def __init__(self, data):
        self.data = data  # Initialize the list of data to be sorted

    def sort(self):
        n = len(self.data)
        for i in range(n):
            min_index = i
            for j in range(i + 1, n):
                if self.data[j] < self.data[min_index]:
                    min_index = j

            if min_index != i:
                self.data[i], self.data[min_index] = self.data[min_index], self.data[i]

    def display(self):
        print("Sorted list:", self.data)


if __name__ == "__main__":
    data = [64, 34, 25, 12, 22, 11, 90]
    sorter = SelectionSort(data)

    print("Original list:", sorter.data)

    sorter.sort()

    sorter.display()

#q4] Implement the merge sort in python

class MergeSort:
    def __init__(self, data):
        self.data = data  # Initialize the list of data to be sorted

    def sort(self):
        self.data = self.merge_sort(self.data)  # Call the merge_sort function to sort the list

    def merge_sort(self, arr):
        if len(arr) <= 1:
            return arr  # Base case: A list of 0 or 1 element is already sorted
        
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]
        
        left_half = self.merge_sort(left_half)
        right_half = self.merge_sort(right_half)
        
        return self.merge(left_half, right_half)

    def merge(self, left, right):
        sorted_list = []
        i = j = 0
        
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                sorted_list.append(left[i])
                i += 1
            else:
                sorted_list.append(right[j])
                j += 1
        
        sorted_list.extend(left[i:])
        sorted_list.extend(right[j:])
        
        return sorted_list

    def display(self):
        print("Sorted list:", self.data)


if __name__ == "__main__":
    data = [64, 34, 25, 12, 22, 11, 90]
    sorter = MergeSort(data)

    print("Original list:", sorter.data)

    sorter.sort()

    sorter.display()

#q5]Implement the linear search algorithm using python

class LinearSearch:
    def __init__(self, data):
        self.data = data  # Initialize the list of data

    def search(self, target):
        for index, value in enumerate(self.data):  
            if value == target:  
                return index  
        return -1 

    def display_result(self, target):
        index = self.search(target)
        if index != -1:
            print(f"Element {target} found at index {index}.")
        else:
            print(f"Element {target} not found in the list.")

if __name__ == "__main__":
    data = [64, 34, 25, 12, 22, 11, 90]
    searcher = LinearSearch(data)

    target = 22
    searcher.display_result(target)  

    target = 100
    searcher.display_result(target)  

#q5] Implement the binary search using Python

class BinarySearch:
    def __init__(self, data):
        self.data = data  # Initialize the list of sorted data

    def search(self, target):
        low = 0
        high = len(self.data) - 1

        while low <= high:
            mid = (low + high) // 2  # Find the middle index
            if self.data[mid] == target:  # Target found
                return mid
            elif self.data[mid] < target:  # Target is in the right half
                low = mid + 1
            else:  # Target is in the left half
                high = mid - 1

        return -1  # Return -1 if the target is not found

    def display_result(self, target):
        index = self.search(target)
        if index != -1:
            print(f"Element {target} found at index {index}.")
        else:
            print(f"Element {target} not found in the list.")

if __name__ == "__main__":
    # Create an object of BinarySearch with a sorted list
    data = [11, 12, 22, 25, 34, 64, 90]
    searcher = BinarySearch(data)
